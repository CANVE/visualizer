< from source file /repos/cae/test-projects/allenAI-pipeline/src/main/scala/org/allenai/pipeline/Producer.scala >

trait Producer[T] extends PipelineStep with CachingEnabled with Logging {
  self =>
  /** Produces the data, if not already produced and cached. */
  protected def create: T
  /** Describes the persistence location of the data produced.
    *
    * The user code should provide the className, classVersion, parameters and dependencies.
    * Usually these are provided via one of the convenience mixins: Ai2StepInfo, Ai2SparkStepInfo.
    *
    * When persisted via Pipeline.persist, the location of the persisted output is determined by
    * the stepInfo, usually as <stepInfo.className>.<stepInfo.signature.id>. The location may refer to
    * a flat file, a directory, or some other resource, represented by an Artifact
    */
  override def stepInfo: PipelineStepInfo
  /** Return the computed value. */
  def get: T = {
    val className = stepInfo.className
    val returnValue =
      if (!cachingEnabled) {
        logger.debug(s"$className caching disabled, recomputing")
        createAndTime
      } else if (!initialized) {
        logger.debug(s"$className computing value")
        initialized = true
        cachedValue
      } else if (!cachedValue.isInstanceOf[Iterator[_]]) {
        logger.debug(s"$className reusing cached value")
        cachedValue
      } else {
        logger.debug(s"$className recomputing value of type Iterator")
        createAndTime
      }
    logger.debug(s"$className returning value")
    returnValue
  }
  private var initialized = false
  protected[this] var timing: Option[Duration] = None
  protected[this] var executionMode: Duration => ExecutionInfo = Executed
  private lazy val cachedValue: T = createAndTime
  /** Report the method by which this Producer's result was obtained
    * (Read from disk, executed, not needed)
    */
  def executionInfo: ExecutionInfo =
    timing.map(executionMode).getOrElse(NotRequested)
  /** Call `create` but store time taken. */
  protected[this] def createAndTime: T = {
    val (result, duration) = Timing.time(this.create)
    timing = Some(duration)
    result
  }
  // It doesn't really make sense for a Producer class to control how it's persisted,
  // because it might depend on the context of a pipeline
  // Prefer using the Pipeline.persist(...) methods instead
  @Deprecated
  def persisted[A <: Artifact](
    io: Serializer[T, A] with Deserializer[T, A],
    artifactSource: => A
  ): PersistedProducer[T, A] =
    new ProducerWithPersistence(this, io, artifactSource)
  /** Default caching policy is set by the implementing class but can be overridden dynamically.
    *
    * When caching is enabled, an in-memory reference is stored to the output object so
    * subsequent calls to .get do not re-process.
    */
  def withCachingEnabled: Producer[T] = {
    if (cachingEnabled) {
      this
    } else {
      copy(cachingEnabled = () => true)
    }
  }
  /** Default caching policy is set by the implementing class but can be overridden dynamically. */
  def withCachingDisabled: Producer[T] = {
    if (cachingEnabled) {
      copy(cachingEnabled = () => false)
    } else {
      this
    }
  }
  def copy[T2](
    create: () => T2 = self.create _,
    stepInfo: () => PipelineStepInfo = self.stepInfo _,
    cachingEnabled: () => Boolean = self.cachingEnabled _,
    executionInfo: () => ExecutionInfo = self.executionInfo _
  ): Producer[T2] = {
    val _create = create
    val _stepInfo = stepInfo
    val _cachingEnabled = cachingEnabled
    val _executionInfo = executionInfo
    new Producer[T2] {
      override def create: T2 = _create()
      override def stepInfo = _stepInfo()
      override def cachingEnabled = _cachingEnabled()
      override def executionInfo = _executionInfo()
    }
  }
}
