< from source file /repos/cae/test-projects/allenAI-pipeline/src/main/scala/org/allenai/pipeline/Workflow.scala >

    val addNodes =
      for ((id, info) <- nodes) yield {
        // Params show up as line items in the pipeline diagram node.
        val params = info.parameters.toList.map {
          case (key, value) =>
            s"$key=${limitLength(value)}"
        }
        // A link is like a param but it hyperlinks somewhere.
        val links =
          // An optional link to the source data.
          info.srcUrl.map(uri => s"""new Link(${link(uri).toJson},${(if (info.classVersion.nonEmpty) info.classVersion else "src").toJson})""") ++ // scalastyle:ignore
            // An optional link to the output data.
            info.outputLocation.map(uri => s"""new Link(${link(uri).toJson},"output")""")
        val linksJson = links.mkString("[", ",", "]")
        val clazz = sources match {
          case _ if errors contains id => "errorNode"
          case _ if sources contains id => "sourceNode"
          case _ if sinks contains id => "sinkNode"
          case _ => ""
        }
        val name = info.stepName
        val desc = info.description.getOrElse(if (name == info.className) "" else info.className)
        s"""        g.setNode("$id", {
                                    |       class: "$clazz",
                                                            |       labelType: "html",
                                                            |       label: generateStepContent(${name.toJson},
                                                                                                               |         ${desc.toJson},
                                                                                                                                         |         ${info.executionInfo.toJson},
                                                                                                                                                                                 |         ${params.toJson},
                                                                                                                                                                                                             |         ${linksJson})
                                                                                                                                                                                                                                     |     });""".stripMargin
      }
