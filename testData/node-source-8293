< from source file /repos/cae/test-projects/allenAI-pipeline/src/main/scala/org/allenai/pipeline/ArtifactIo.scala >

class LineIteratorIo[T: StringSerializable: ClassTag](implicit codec: Codec)
    extends ArtifactIo[Iterator[T], FlatArtifact] with Ai2SimpleStepInfo {
  val format = implicitly[StringSerializable[T]]
  override def read(artifact: FlatArtifact): Iterator[T] =
    StreamClosingIterator(artifact.read) { is =>
      Source.fromInputStream(is).getLines().map(s => format.fromString(s))
    }
  override def write(data: Iterator[T], artifact: FlatArtifact): Unit = {
    artifact.write { w =>
      for (d <- data)
        w.println(format.toString(d))
    }
  }
  override def stepInfo: PipelineStepInfo = {
    val className = scala.reflect.classTag[T].runtimeClass.getSimpleName
    super.stepInfo.copy(
      className =
      s"ReadIterator[$className]",
      parameters = Map("charSet" -> codec.charSet.toString),
      description = Some(s"Stream iterator of [$className]")
    )
  }
}
