< from source file /repos/cae/test-projects/allenAI-pipeline/src/main/scala/org/allenai/pipeline/FileArtifact.scala >

class ZipFileArtifact(val file: File) extends StructuredArtifact {
  import org.allenai.pipeline.StructuredArtifact._
  override def exists: Boolean = file.exists
  override def url: URI = file.getCanonicalFile.toURI
  override def reader: Reader = {
    require(exists, s"Cannot read from non-existent file $file")
    new ZipFileReader(file)
  }
  // Atomic write operation
  override def write[T](writer: Writer => T): T = {
    val w = new ZipFileWriter(file)
    val result = writer(w)
    w.close()
    result
  }
  override def toString: String = s"ZipFileArtifact[$file]"
  class ZipFileReader(file: File) extends Reader {
    private val zipFile = new ZipFile(file)
    // Will throw exception if non-existent entry name is given
    def read(entryName: String): InputStream = zipFile.getInputStream(zipFile.getEntry(entryName))
    // Read all entries in order
    def readAll: Iterator[(String, InputStream)] = {
      for (entry <- zipFile.entries.asScala) yield (entry.getName, zipFile.getInputStream(entry))
    }
  }
  class ZipFileWriter(file: File) extends Writer {
    private val parentDir = file.getCanonicalFile.getParentFile
    require(
      (parentDir.exists && parentDir.isDirectory) || parentDir.mkdirs,
      s"Unable to find or create directory $parentDir"
    )
    private val tmpFile = File.createTempFile(file.getName, "tmp", parentDir)
    tmpFile.deleteOnExit()
    private val zipOut = new ZipOutputStream(new FileOutputStream(tmpFile))
    private val out = new ArtifactStreamWriter(zipOut)
    // Atomic write operation
    def writeEntry[T](name: String)(writer: ArtifactStreamWriter => T): T = {
      zipOut.putNextEntry(new ZipEntry(name))
      val result = writer(out)
      zipOut.closeEntry()
      result
    }
    private[ZipFileArtifact] def close() = {
      zipOut.close()
      require(tmpFile.renameTo(file), s"Unable to create $file")
    }
  }
}
