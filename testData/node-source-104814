< from source file /repos/cae/test-projects/allenAI-pipeline/src/main/scala/org/allenai/pipeline/s3/S3Artifact.scala >

  protected def getCachedArtifact: A = cachedFile match {
    case Some(f) => f
    case None =>
      val cacheDir = {
        val f = new File(System.getProperty("java.io.tmpdir"), "pipeline-cache")
        if (f.exists && !f.isDirectory) {
          f.delete()
        }
        if (!f.exists) {
          f.mkdirs()
        }
        f
      }
      require(
        cacheDir.exists && cacheDir.isDirectory,
        s"Unable to create cache directory ${cacheDir.getCanonicalPath}"
      )
      val downloadFile = new File(cacheDir, path.replaceAll("""/""", """\$"""))
      if (exists && !downloadFile.exists) {
        logger.debug(s"Downloading $bucket/$path to $downloadFile")
        val tmpFile = File.createTempFile(downloadFile.getName, "tmp", downloadFile.getParentFile)
        tmpFile.deleteOnExit()
        val os = new FileOutputStream(tmpFile)
        val is = service.getObject(bucket, path).getObjectContent
        val buffer = new Array[Byte](BUFFER_SIZE)
        Iterator.continually(is.read(buffer)).takeWhile(_ != -1).foreach(n =>
          os.write(buffer, 0, n))
        is.close()
        os.close()
        require(
          tmpFile.renameTo(downloadFile),
          s"Unable to create download file ${downloadFile.getCanonicalPath}"
        )
      }
      cachedFile = Some(makeLocalArtifact(downloadFile))
      cachedFile.get
  }
