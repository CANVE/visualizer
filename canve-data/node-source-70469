< in file /repos/canve/test-projects/allenAI-pipeline/src/main/scala/org/allenai/pipeline/Workflow.scala >

  def forPipeline(steps: Iterable[(String, PipelineStep)], targets: Iterable[String]): Workflow = {
    val idToName = steps.map { case (k, v) => (v.stepInfo.signature.id, k) }.toMap
    val nameToStep = steps.toMap
    def findNodes(s: PipelineStep): Iterable[PipelineStep] =
      Seq(s) ++ s.stepInfo.dependencies.flatMap {
        case (name, step) =>
          findNodes(step)
      }
    val nodeList = for {
      name <- targets
      step = nameToStep(name)
      childStep <- findNodes(step)
    } yield {
      val id = childStep.stepInfo.signature.id
      val childName = idToName.getOrElse(id, childStep.stepInfo.className)
      (id, Node(childName, childStep))
    }
    def findLinks(s: PipelineStepInfo): Iterable[(PipelineStepInfo, PipelineStepInfo, String)] =
      s.dependencies.map { case (name, dep) => (dep.stepInfo, s, name) } ++
        s.dependencies.flatMap(t => findLinks(t._2.stepInfo))
    val nodes = nodeList.toMap
    val links = (for {
      stepName <- targets
      step = nameToStep(stepName)
      (from, to, name) <- findLinks(step.stepInfo)
    } yield Link(from.signature.id, to.signature.id, name)).toSet
    Workflow(nodes, links)
  }
