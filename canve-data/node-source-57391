< in file /repos/canve/test-projects/allenAI-pipeline/src/main/scala/org/allenai/pipeline/ExternalProcess.scala >

object RunExternalProcess {
  import ExternalProcess.CommandOutput
  def apply(
    commandTokens: CommandToken*
  )(
    inputs: Map[String, Producer[() => InputStream]] = Map(),
    versionHistory: Seq[String] = Seq(),
    requireStatusCode: Iterable[Int] = List(0)
  ): CommandOutputComponents = {
    val outputNames = commandTokens.collect { case OutputFileToken(name) => name }
    val processCmd = new RunExternalProcess(commandTokens, versionHistory, inputs)
    val baseName = processCmd.stepInfo.className
    val stdout = new ExtractOutputComponent("stdout", _.stdout, processCmd, requireStatusCode)
    val stderr = new ExtractOutputComponent("stderr", _.stderr, processCmd, requireStatusCode)
    val outputStreams =
      for (name <- outputNames) yield {
        val outputProducer =
          new ExtractOutputComponent(s"outputs.$name", _.outputs(name), processCmd, requireStatusCode)
        (name, outputProducer)
      }
    CommandOutputComponents(stdout, stderr, outputStreams.toMap)
  }
  class ExtractOutputComponent(
      name: String,
      f: CommandOutput => () => InputStream,
      processCmd: Producer[CommandOutput],
      requireStatusCode: Iterable[Int] = List(0)
  ) extends Producer[() => InputStream] {
    override protected def create: () => InputStream = {
      val result = processCmd.get
      result match {
        case CommandOutput(status, _, _, _) if requireStatusCode.toSet.contains(status) =>
          f(result)
        case CommandOutput(status, _, stderr, _) =>
          val stderrString = IOUtils.readLines(stderr()).asScala.take(100)
          sys.error(s"Command ${processCmd.stepInfo.parameters("cmd")} failed with status$status: $stderrString")
      }
      f(processCmd.get)
    }
    override def stepInfo: PipelineStepInfo =
      PipelineStepInfo(className = name)
        .addParameters("cmd" -> processCmd)
    def ifSuccessful[T](f: CommandOutput => T): () => T = { () =>
      val result = processCmd.get
      result match {
        case CommandOutput(0, _, _, _) => f(result)
        case CommandOutput(_, _, stderr, _) =>
          sys.error(s" Failed to run command ${processCmd.stepInfo.parameters("cmd")}: $stderr")
      }
    }
  }
}
