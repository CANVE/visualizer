< in file /repos/cae/test-projects/allenAI-pipeline/src/main/scala/org/allenai/pipeline/Workflow.scala >

object Workflow {
  def forPipeline(steps: Iterable[(String, PipelineStep)], targets: Iterable[String]): Workflow = {
    val idToName = steps.map { case (k, v) => (v.stepInfo.signature.id, k) }.toMap
    val nameToStep = steps.toMap
    def findNodes(s: PipelineStep): Iterable[PipelineStep] =
      Seq(s) ++ s.stepInfo.dependencies.flatMap {
        case (name, step) =>
          findNodes(step)
      }
    val nodeList = for {
      name <- targets
      step = nameToStep(name)
      childStep <- findNodes(step)
    } yield {
      val id = childStep.stepInfo.signature.id
      val childName = idToName.getOrElse(id, childStep.stepInfo.className)
      (id, Node(childName, childStep))
    }
    def findLinks(s: PipelineStepInfo): Iterable[(PipelineStepInfo, PipelineStepInfo, String)] =
      s.dependencies.map { case (name, dep) => (dep.stepInfo, s, name) } ++
        s.dependencies.flatMap(t => findLinks(t._2.stepInfo))
    val nodes = nodeList.toMap
    val links = (for {
      stepName <- targets
      step = nameToStep(stepName)
      (from, to, name) <- findLinks(step.stepInfo)
    } yield Link(from.signature.id, to.signature.id, name)).toSet
    Workflow(nodes, links)
  }
  def upstreamDependencies(step: PipelineStep): Set[PipelineStep] = {
    val parents = step.stepInfo.dependencies.map(_._2).toSet
    parents ++ parents.flatMap(upstreamDependencies)
  }
  implicit val jsFormat = {
    implicit val linkFormat = jsonFormat3(Link)
    implicit val nodeFormat = {
      implicit val uriFormat = new JsonFormat[URI] {
        override def write(uri: URI): JsValue = JsString(uri.toString)
        override def read(value: JsValue): URI = value match {
          case JsString(uri) => new URI(uri)
          case s => sys.error(s"Invalid URI: $s")
        }
      }
      jsonFormat10(Node.apply)
    }
    jsonFormat(Workflow.apply, "nodes", "links")
  }
  private def link(uri: URI) = uri.getScheme match {
    case "s3" | "s3n" =>
      new java.net.URI("http", s"${uri.getHost}.s3.amazonaws.com", uri.getPath, null).toString
    case "file" =>
      new java.net.URI(null, null, uri.getPath, null).toString
    case _ => uri.toString
  }
  private val DEFAULT_MAX_SIZE = 40
  private val LHS_MAX_SIZE = 15
  private def limitLength(s: String, maxLength: Int = DEFAULT_MAX_SIZE) = {
    val trimmed = if (s.size < maxLength) {
      s
    } else {
      val leftSize = math.min(LHS_MAX_SIZE, maxLength / 3)
      val rightSize = maxLength - leftSize
      s"${s.take(leftSize)}...${s.drop(s.size - rightSize)}"
    }
    trimmed.replaceAll(">", "&gt;").replaceAll("<", "&lt;")
  }
}
