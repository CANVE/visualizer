< in file /repos/cae/test-projects/allenAI-pipeline/src/main/scala/org/allenai/pipeline/Pipeline.scala >

trait ConfiguredPipeline extends Pipeline {
  val config: Config
  override def rootOutputUrl =
    config.get[String]("output.dir").map(s => new URI(s))
      .getOrElse(new File(System.getProperty("user.dir")).toURI)
  protected[this] def getStringList(key: String) =
    config.get[String](key) match {
      case Some(s) => List(s)
      case None => config.get[Seq[String]](key) match {
        case Some(sList) => sList
        case None => List()
      }
    }
  override def run(rawTitle: String) = {
    val (targets, isRunOnly) =
      getStringList("runOnly") match {
        case seq if seq.nonEmpty =>
          (seq, true)
        case _ =>
          getStringList("runUntil") match {
            case seq if seq.nonEmpty =>
              (seq, false)
            case _ =>
              (persistedSteps.keys, false)
          }
      }
    config.get[Boolean]("dryRun") match {
      case Some(true) =>
        val outputDir = config.get[String]("dryRunOutput")
          .getOrElse(System.getProperty("user.dir"))
        dryRun(new File(outputDir), rawTitle, targets)
        List()
      case _ =>
        if (isRunOnly) {
          runOnly(rawTitle, targets)
        } else {
          runPipelineReturnResults(rawTitle, targets)
        }
    }
  }
  override def persist[T, A <: Artifact: ClassTag](
    original: Producer[T],
    io: Serializer[T, A] with Deserializer[T, A],
    name: String = null,
    suffix: String = ""
  ): PersistedProducer[T, A] = {
    val stepName = Option(name).getOrElse(original.stepInfo.className)
    val configKey = s"output.persist.$stepName"
    if (config.hasPath(configKey)) {
      config.getValue(configKey).unwrapped() match {
        case path: String if path != "false" =>
          super.persistToArtifact(original, io, createOutputArtifact[A](path), name)
        case java.lang.Boolean.FALSE | "false" =>
          // Disable persistence
          new ProducerWithPersistence(original, io, createOutputArtifact[A]("save-disabled")) {
            override def create = original.get
            override def stepInfo = original.stepInfo
          }
        case _ =>
          super.persist(original, io, name, suffix)
      }
    } else {
      super.persist(original, io, name, suffix)
    }
  }
}
