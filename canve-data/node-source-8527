< in file /repos/canve/test-projects/allenAI-pipeline/src/main/scala/org/allenai/pipeline/s3/S3Artifact.scala >

trait S3Artifact[A <: Artifact] extends Logging {
  this: Artifact =>
  def config: S3Config
  protected def makeLocalArtifact(f: File): A
  protected def contentTypeOverride: Option[String]
  def path: String
  override def url: URI = new URI("s3", bucket, s"/$path", null)
  val service = config.service
  val bucket = config.bucket
  override def exists: Boolean = {
    val result = try {
      service.getObjectMetadata(config.bucket, path)
      true
    } catch {
      case e: AmazonServiceException if e.getStatusCode == 404 => false
      case ex: Exception => throw ex
    }
    result
  }
  def contentType: String = contentTypeOverride.getOrElse(defaultContentType)
  def defaultContentType: String = path match {
    case s if s.endsWith(".html") => "text/html"
    case s if s.endsWith(".txt") => "text/plain"
    case s if s.endsWith(".json") => "application/json"
    case _ => "application/octet-stream"
  }
  protected def upload(file: File): Unit = {
    logger.debug(s"Uploading $file to $bucket/$path")
    val metadata = new ObjectMetadata()
    metadata.setContentType(contentType)
    val request = new PutObjectRequest(bucket, path, file).withMetadata(metadata)
    request.setCannedAcl(CannedAccessControlList.PublicRead)
    service.putObject(request)
  }
  protected var cachedFile: Option[A] = None
  private val BUFFER_SIZE = 1048576
  // 1 MB buffer
  protected def getCachedArtifact: A = cachedFile match {
    case Some(f) => f
    case None =>
      val cacheDir = {
        val f = new File(System.getProperty("java.io.tmpdir"), "pipeline-cache")
        if (f.exists && !f.isDirectory) {
          f.delete()
        }
        if (!f.exists) {
          f.mkdirs()
        }
        f
      }
      require(
        cacheDir.exists && cacheDir.isDirectory,
        s"Unable to create cache directory ${cacheDir.getCanonicalPath}"
      )
      val downloadFile = new File(cacheDir, path.replaceAll("""/""", """\$"""))
      if (exists && !downloadFile.exists) {
        logger.debug(s"Downloading $bucket/$path to $downloadFile")
        val tmpFile = File.createTempFile(downloadFile.getName, "tmp", downloadFile.getParentFile)
        tmpFile.deleteOnExit()
        val os = new FileOutputStream(tmpFile)
        val is = service.getObject(bucket, path).getObjectContent
        val buffer = new Array[Byte](BUFFER_SIZE)
        Iterator.continually(is.read(buffer)).takeWhile(_ != -1).foreach(n =>
          os.write(buffer, 0, n))
        is.close()
        os.close()
        require(
          tmpFile.renameTo(downloadFile),
          s"Unable to create download file ${downloadFile.getCanonicalPath}"
        )
      }
      cachedFile = Some(makeLocalArtifact(downloadFile))
      cachedFile.get
  }
}
