< in file /repos/canve/test-projects/allenAI-pipeline/src/main/scala/org/allenai/pipeline/ArtifactFactory.scala >

trait ArtifactFactory {
  /** @param url The location of the Artifact.  The scheme (protocol) is used to determine the
    *            specific implementation.
    * @tparam A The type of the Artifact to create.  May be an abstract or concrete type
    * @return The artifact
    */
  def createArtifact[A <: Artifact: ClassTag](url: URI): A
  /** If path is an absolute URL, create an Artifact at that location.
    * If it is a relative path, create it relative to the given root URL
    */
  def createArtifact[A <: Artifact: ClassTag](rootUrl: URI, path: String): A = {
    val parsed = new URI(path)
    val url = parsed.getScheme match {
      case null =>
        val fullPath = s"${rootUrl.getPath.reverse.dropWhile(_ == '/').reverse}/${parsed.getPath.dropWhile(_ == '/')}"
        new URI(
          rootUrl.getScheme,
          rootUrl.getHost,
          fullPath,
          rootUrl.getFragment
        )
      case _ => parsed
    }
    createArtifact[A](url)
  }
}
