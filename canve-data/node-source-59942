< in file /repos/cae/test-projects/allenAI-pipeline/src/main/scala/org/allenai/pipeline/FileArtifact.scala >

  class ZipFileWriter(file: File) extends Writer {
    private val parentDir = file.getCanonicalFile.getParentFile
    require(
      (parentDir.exists && parentDir.isDirectory) || parentDir.mkdirs,
      s"Unable to find or create directory $parentDir"
    )
    private val tmpFile = File.createTempFile(file.getName, "tmp", parentDir)
    tmpFile.deleteOnExit()
    private val zipOut = new ZipOutputStream(new FileOutputStream(tmpFile))
    private val out = new ArtifactStreamWriter(zipOut)
    // Atomic write operation
    def writeEntry[T](name: String)(writer: ArtifactStreamWriter => T): T = {
      zipOut.putNextEntry(new ZipEntry(name))
      val result = writer(out)
      zipOut.closeEntry()
      result
    }
    private[ZipFileArtifact] def close() = {
      zipOut.close()
      require(tmpFile.renameTo(file), s"Unable to create $file")
    }
  }
