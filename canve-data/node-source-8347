< in file /repos/canve/test-projects/allenAI-pipeline/src/main/scala/org/allenai/pipeline/ExternalProcess.scala >

object ExternalProcess {
  sealed trait CommandToken {
    def name: String
  }
  case class StringToken(name: String) extends CommandToken
  case class InputFileToken(name: String) extends CommandToken
  case class OutputFileToken(name: String) extends CommandToken
  import scala.language.implicitConversions
  implicit def convertToInputData[T, A <: FlatArtifact](p: PersistedProducer[T, A]): Producer[() => InputStream] = {
    p.copy(create =
      () => {
        p.get
        StreamIo.read(p.artifact.asInstanceOf[FlatArtifact])
      })
  }
  implicit def convertArtifactToInputData[A <: FlatArtifact](artifact: A): Producer[() => InputStream] = StaticResource(artifact)
  implicit def convertToToken(s: String): StringToken = StringToken(s)
  case class CommandOutput(
    returnCode: Int,
    stdout: () => InputStream,
    stderr: () => InputStream,
    outputs: Map[String, () => InputStream]
  )
}
